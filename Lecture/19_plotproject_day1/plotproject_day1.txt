# Names: Oceane Andreis
Partner: Abby Nay


# You may work with 1 or 2 partners for this activity.
# Note! This will be an activity that spans multiple days â€” it will be easiest if you and your partner(s) are able to work together for the duration of the activity.

Task 0: Visualizing our plotting field.
------------------------------------

The scene that we are going to be plotting our points on has (0, 0) in the top left corner and (width, height) in the bottom right corner. We'll call this layout "gui adjusted".

(0,0) --------------------------------------- (width, 0)
|                                                      |
|                                                      |
|                                                      |
|                                                      |
|                                                      |
|                                                      |
|                                                      |
|                                                      |
|                                                      |
|                                                      |
(0, height) ---------------------------- (width, height)

We want to adjust this so that (0, 0) is in the middle of our scene (where our x and y axes meet). Fill in the adjusted values in each of the 4 corners. We'll call this layout "standard". We've filled in the upper left corner to help you get started.

(-width/2, height/2) ------------------------ (width/2, height/2)
|                          y                           |
|                          y                           |
|                          y                           |
|                          y                           |
|                          y                           |
|xxxxxxxxxxxxxxxxxxxxxxxx(0, 0)xxxxxxxxxxxxxxxxxxxxxxxx|
|                          y                           |
|                          y                           |
|                          y                           |
|                          y                           |
|                          y                           |
(-width/2, -height/2) -------------------------------- (width/2, -height/2)


Given a point in standard format, (x, y), what equations will you use to calculate the equivalent coordinates on our gui adjusted layout?

For example, I want an equation that, given the x coordinate 0, will calculate the value width / 2. Given the y coordinate 10, the y-coordinate equation should calculate the value height / 2 - 10. This will make our point (0, 10) appear as if plotted in the standard layout.

1) # x+width/2, -y+height/2

Task 1: Importing our project
----------------------------------

Move the provided files to whichever directory you prefer to have your qt projects live.

Notice that this directory doesn't contain a *.pro.user file. That's because the .pro.user file that is user specific. It should not be included in repositories, etc.

Open Qt Creator and choose "Open Project". When prompted, choose the first option (clang) for the build system. Your project should now open and you should be able to press the green "play" button to successfully build the project.


Task 2: Adding axes
------------------
Now, we'll modify the code in the PlotWindow constructor so that x and y axes are drawn on your QGraphicsScene.
Use the `scene->addLine` function to do this.

1)     int width = view->frameSize().width();
		   int height = view->frameSize().height();

      // scene->addLine(x_pos_start, y_pos_start, x_pos_end, y_pos_end)
       scene->addLine(width/2,0,width/2,height); //x stays the same but y moves, goes up and down
       scene->addLine(0,height/2,width,height/2); //y stays the same but x move, goes left and right



Task 3: Qt GUI basics -- using the framework for the given qt plotting project
----------------------------------

1) What object does our PlotWindow inherit?

QMainWindow


2) What objects are created in the main.cpp file? What two methods are called? What do these two methods do? Take a look at the documentation for QWidget and QApplication: http://doc.qt.io/qt-5/qwidget.html and http://doc.qt.io/qt-5/qapplication.html

QApplication and PlotWindow are created.
We are calling show() and exec(). show().
show() shows the widget and its child widgets.
This is equivalent to calling showFullScreen(), showMaximized(), or setVisible(true), depending on the platform's default behavior for the window flags.
exec() enters the main event loop and waits until exit() is called, then returns the value that was set to exit() (which is 0 if exit() is called via quit()).
(^Taken from the website)
3) Write down the lines of code that you would use in the PlotWindow object to access each ui element.

ui->myElement;

4) What are some differences between a QGraphicsView and a QGraphicsScene? In our example, which one contains the other?
In our example QGraphicsView contains QGraphicsScene.
QGraphicsView has the interface(what we see) and QGraphicsScene provides the functionality for the view..


QGraphicsView visualizes the contents of a QGraphicsScene in a scrollable viewport.
QGraphicsScene also provides functionality that lets you efficiently determine both the location of items, and for determining what items are visible within an arbitrary area on the scene.
QGraphicsScene has no visual appearance of its own; it only manages the items. You need to create a QGraphicsView widget to visualize the scene
(^Taken from the website)

Task 4: Connecting randomButton to a method
----------------------------------

From the UI editing view, right click the button with the text "Random Button". Choose "Go to slot...", then choose "clicked()".

1) What is the name of the method that was created? What object is it a method of? When you look in the header file for that object, what is this method?
The name is on_randomButton_clicked().
It's a method of PlotWindow
void PlotWindow::on_randomButton_clicked()
{

}

on_randomButton_clicked() in the header is declared in the private slots and belongs to the PlotWindow class.
private slots:
    void on_randomButton_clicked();

2) Write code in this method that prints to qDebug(). When is this code run?

The code ran when I clicked the random button and it outputted in the application output.


Task 5: Connecting a signal to a non-default slot
----------------------------------

1) Add a slot void SlotTest to your PlotWindow. You'll need to add the method declaration in the .h file and the implementation in the .cpp file. Put a print to qDebug() in this slot.

void PlotWindow::SlotTest(){

    qDebug("Task 5 part 1");

}

header file:
private slots:
    void on_randomButton_clicked();
    void SlotTest();

2) Connect the signal of &QAbstractButton::pressed to the slot that you made for number 1. What are the differences between the clicked and the pressed events?

connect(ui->randomButton, &QAbstractButton::pressed, this, &PlotWindow::SlotTest);

Clicked means pressed and released while pressed is just the push action and not the release action.

Task 6: Adding the Point object to your project
-----------------------------------------------

Download point.[h, cpp] from the github repo (these are in the point folder). Move these files into your plotproject_starter folder via the command line or a file explorer.


1) Can you see these files under the "Headers" and "Sources" folder icons in Qt Creator?

No

2) Edit your plotproject_starter1.pro file to include the point.[h, cpp] files. What happens in Qt Creator when you edit these files?
Hint: make sure to include "\" characters if necessary after previously listed files!

When I add the plotproject_starter1.pro and include point.h and point.cpp in there,
it then appears in the "Headers" and "Sources" folder icons in Qt Creator


3) Add an include for "point.h" into your plotwindow.[h, cpp] files. Make sure that your project can still build.

Completed


Task 7: Exploring Point
-----------------------------------------------

1) What object(s) does the Point object inherit from? Can a Point object emit a signal?

It inherits public QObject, public QGraphicsItem.
Yes it can emit a signal.


2) What are the static fields (class attributes) of the Point class? What do you think that they are for/will be for?
These are the static filef of the point class:
static const int width_ = 20; // This is so the whole class can use this constant width(the width of our points will not change)
//static int get_width() { return width_; }; // This getter is so we can access our private width_


3) What are the non-static fields (class attributes) of the Point class?
 int x_;
 int y_;
 QColor color_;
 friend bool operator==(const Point &first, const Point &other);


4) What are the purposes of the following methods (go read the qt documentation and the documentation on our github in the examples folder):

	a) boundingRect - QRectF QGraphicsItem::boundingRect() const
	This pure virtual function defines the outer bounds of the item as a rectangle; all painting must be restricted to inside an item's bounding rect.
	QGraphicsView uses this to determine whether the item requires redrawing.


	b) shape - QPainterPath QGraphicsItem::shape() const
	Returns the shape of this item as a QPainterPath in local coordinates. The shape is used for many things, including collision detection, hit tests, and for the QGraphicsScene::items() functions.
  The default implementation calls boundingRect() to return a simple rectangular shape, but subclasses can reimplement this function to return a more accurate shape for non-rectangular items.

	c) paint - void QGraphicsItem::paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget = 0)
	This function, which is usually called by QGraphicsView, paints the contents of an item in local coordinates.
  Reimplement this function in a QGraphicsItem subclass to provide the item's painting implementation, using painter.

5) Add some Point(s) to your gui in the PlotWindow constructor (we'll work on connecting the add button next lecture)
	Done
