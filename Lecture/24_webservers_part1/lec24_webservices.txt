Feel free to work in groups of 2 - 3!

Name(s):
Oceane Andreis
Deanne A
Musaab a


Turn this file in on canvas before you leave class today!

******************************************************************
*** Answer all of the following questions about APIs and REST ***
******************************************************************
1) In your own words, what is an API?
An API is an application programming interface
It's a tool to use to take advantage of other tool. You can use API to interact/interface with a service.
It's like a wrench for loosening the bolt from a tire.

2) Web Requests

Say I have a server that accepts both GET and POST requests at the endpoint:

http://catscatscats.ca/info

a) What is a GET request? A get request retrieves some information
	i) How is a GET request formatted - xmlhttp.open("GET", http://catscatscats.ca/info, true);
	GET http://catscatscats.ca/info
	ii) How are parameters sent? Within the Url, separated by a ? from the endpoint, then & between parameters

	iii) Side effects? No
	iv) Write down the url for a GET request for the above endpoint, sending parameters breed with value "mainecoon" and attitude with value "sassy".
	GET http://catscatscats.ca/info?breed=mainecoon&attitude=sassy


b) What is a POST request? A POST request is used to create resources
	i) How is it formulated? xhttp.open("POST", http://catscatscats.ca/info, true);

	POST http://catscatscats.ca/info  and also a content/data payload
	ii) How is data sent? not in the Url
	iii) Side effects?
	Yes, Information is created wherever the post request is sent to
	iv) Write down the url for a POST request for the above endpoint. If I want to send a json with the following information, where would that go? {"id": "catluver7000", "profile_text": "I luuuuv cats"}
POST http://catscatscats.ca/info
--data {"id": "catluver7000", "profile_text": "I luuuuv cats"}     (JSON)

***************************************************************************************
*** Answer all of the following questions using the developer tools on your browser ***
***************************************************************************************

0) Open the developer tools to the network pane.

1) Navigate to a website. What website did you navigate to and what kind of requests were made?



2) Find a website that issues both GET and POST requests when you navigate to it.

a) What is the request payload (also called parameters in some dev. tools) associated with one of the POST requests?


b) What is the response to the request from question 2a?


c) Take a look at some of the GET requests. Do these requests have payloads?


d) What is the response to the request from question 2c?



********************************************************************
*** Answer all of the following questions about the Dark Sky API ***
********************************************************************

0) Register for the Dark Sky API (https://darksky.net/dev) if you have not already done this previously


1) What GET endpoints are available in this API?

Forecast
Time Machine

2) What POST endpoints are available in this API?

No

3) Open a new window in your preferred web browser and navigate to
https://api.darksky.net/forecast/[YOUR KEY HERE]/40.0,-105.263


4) Now, we'll use the command line tool curl to do the same thing. (remember that you can read the man page for curl by typing "man curl"
The basic format for curl is: curl -i -X [GET|POST|DELETE|etc] [address]
The -i stands for include which includes the HTTP header in the output (helpful)
The -X stands for request which lets us explicitly say what request we are making (default is GET)

What is the curl command that is equivalent to the url you put for question 3?
curl -i -X GET https://api.darksky.net/forecast/[YOUR KEY HERE]/40.0,-105.263



5) Write down valid curl commands to access the other GET endpoints from this API.

curl -i -X GET https://api.darksky.net/forecast/[YOUR KEY HERE]/40.0,-105.263


******************************************************************************
*** Answer the following questions about the examples in Simple-Web-Server ***
******************************************************************************
Look at the code at https://gitlab.com/eidheim/Simple-Web-Server


1) Let's explore the API in http_examples.cpp!

a) What GET endpoints are available in this API? What do they do?
Info

b) What POST endpoints are available in this API? What do they do?
JSOn

2) This library provides support for both synchronous and asynchronous request handling (see the bottom of http_examples.cpp where the client is used). What is the difference between synchronous and asynchronous here? Why would we want support for both these types of requests?



********************************************************************************************
*** Get Simple-Web-Server up and running, make sure to do this before class on Thursday. ***
********************************************************************************************

https://gitlab.com/eidheim/Simple-Web-Server

Follow the set-up instructions in the README. Below are a summary.

1) Install boost
Linux:
$ sudo apt-get update
$ sudo apt-get install libboost-all-dev

Mac OS
if you don't have brew installed, otherwise, go install it first
https://brew.sh/

$ brew install openssl boost

2) Make & build a simple web server
Clone this simple web server: https://gitlab.com/eidheim/Simple-Web-Server
Follow the “Compile and run” instructions for the Simple Web Server

If you do not have cmake installed:
$ sudo apt-get install cmake

At the end of this step, you should have a simple web server that provides an API up and running over http.
