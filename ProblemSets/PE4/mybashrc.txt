# some useful commands for your .bashrc to make things more colorful (if you want)
alias egrep="egrep --color"
alias grep="grep --color"
alias ls="ls -G"  # colorized ls

# git init ->any folder into a git repository
#test by creating  a new file
#git add then git status it should change color
# git commit -> change color because it updated
#source .bashrc_starter

# A decent stack exchange on color codes: https://unix.stackexchange.com/questions/124407/what-color-codes-can-i-use-in-my-ps1-prompt
# Recommendation: define named variables, then use those variables

# one of many webpages with info about special PS1 codes: https://ss64.com/bash/syntax-prompt.html

# For example, this is the color reset code
RESET="\033[0m"
Pink="\033[1;31m"
Green="\033[2;36m"
Blue="\033[01;34m"
Red="\033[1;31m"
Yellow="\033[1;33m"
EXAMPLE_COLOR_REPLACE_ME="\033[01;32m"


function git_indicator {
    local git_status="$(git status 2> /dev/null)"  # redirect stderr to /dev/null -- we just need it in this variable

    #echo $git_status # will help you decide what strings to test for, remove it later

    echo -ne "$Blue:Oceane $RESET" # as an example, see how echoing text here changes your prompt
    #\e[1mOceane\e[0m
    # insert strings to test for in the if statements below
    # example of using an "and" (&&)
    # =~ means "contains"
    # ! means "not"
    # be very very careful of spacing in bash-land!
    # the following if statements are examples -- fill them in, rearrange them, etc to your
    # hearts content
    if [[ $git_status =~ "No commits yet" ]] && [[ $git_status =~ "On branch master" ]]; then
        echo -ne $Green
    elif [[  $git_status =~ "Changes not staged for commit" ]]; then
        echo -ne $Red
    elif [[  $git_status =~ "Changes to be committed" ]]; then
        echo -ne $Blue #looks purple
    elif [[  $git_status =~ "nothing to commit" ]]; then
        echo -ne $Green   #looks blue
    else
        echo -ne
    fi
}
# git add . -> all file
#then git commit -m "first commit"
#then edit the file to make it dirty ->echo "hello">> empty.txt

function git_branch {
    local git_status="$(git status 2> /dev/null)"
    local on_branch="On branch ([^${IFS}]*)"
    local on_commit="HEAD detached at ([^${IFS}]*)"

    if [[ $git_status =~ $on_branch ]]; then
          local branch=${BASH_REMATCH[1]}
          echo "($branch)"

    elif [[ $git_status =~ $on_commit ]]; then
          local commit=${BASH_REMATCH[1]}
          echo "($commit)"

    fi
}

# edit to your heart's content
PS1="\W"          # base of your PS1
PS1+="\[$Yellow\][\d \t]"
PS1+="\[$Green\][\u] $RESET"
PS1+="\$(git_indicator)"        # indicates git status
PS1+="\$(git_branch)"           # prints current branch
PS1+="\[$Pink\] PE4 \$\[$RESET\] " # prints out "blah $" -- change this!
#echo $PS1

# don't forget to export it at the end!
# make sure that you run source ~/.bashrc to see the changes from your PS1!
export PS1
